; Copyright 2005 Spiro Trikaliotis
; All rights reserved.
;
; This file is part of OpenCBM
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in
;       the documentation and/or other materials provided with the
;       distribution.
;     * Neither the name of the OpenCBM team nor the names of its
;       contributors may be used to endorse or promote products derived
;       from this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
; IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
; OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

Drive1581       = 1                     ;Compile for 1581 drives

; libopencbmtransfer routines, main loop

        .include "common.i65"

; define the next if WRITEMEM should be tested
; DefTestWriteMem = 1
DefFlipLed = 1

        * = TURBOMAIN_ROUTINES

.assert * = turbo_init,  error, "1541/1571 turbo_init is not at right location"
        jsr transfer_init
.assert * = turbo_start, error, "1541/1571 turbo_start is not at right location"
        jmp start

readmem:
        jsr transfer_send_block
        beq start       ; uncond

execute_cmd:
        jsr ts
        jmp (ptr)

        ; Init transfer routine
start:
.ifdef DefFlipLed
        jsr flipled
.endif
        jsr transfer_get_byte
.ifdef DefFlipLed
        jsr flipled
.endif
        bmi execute_cmd

readmem_cmd:
writemem_cmd:
        pha
        jsr ts
        jsr transfer_get_byte
        tay
        pla
        bne readmem     ; read memory, then execute that
.ifdef DefTestWriteMem
        lda #<BUFFER0
        sta ptr
        lda #>BUFFER0
        sta ptr+1
.endif
        jsr transfer_get_block
.ifdef DefTestWriteMem
        ldy #0
cmpnext lda (ptr),y
        cmp (ptr2),y
        bne error
        iny
        bne cmpnext
.endif
        beq start       ; uncond

.ifdef DefTestWriteMem
error:
        jsr flipled
        jsr delay1
        jsr flipled
        jsr delay1
        jmp error
.endif

ts:
        jsr transfer_get_ts
        stx ptr
        sty ptr+1
.ifdef DefTestWriteMem
        stx ptr2
        sty ptr2+1
.endif
        rts



.ifdef DefFlipLed
flipled:
        pha
        lda #LED_BIT
        eor LED_PORT
        sta LED_PORT
        pla
        rts

delay1:
        pha
        txa
        pha
        tya
        pha

        ldx #0
        ldy #0

loop:   dey
        bne loop
        dex
        bne loop

        pla
        tay
        pla
        tax
        pla
        rts
.endif

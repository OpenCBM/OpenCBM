; Copyright 2005 Spiro Trikaliotis
; All rights reserved.
;
; This file is part of OpenCBM
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in
;       the documentation and/or other materials provided with the
;       distribution.
;     * Neither the name of the OpenCBM team nor the names of its
;       contributors may be used to endorse or promote products derived
;       from this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
; IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
; OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

; libopencbmtransfer routines, main loop

        .include "common.i65"

; define the next if WRITEMEM should be tested
; DefTestWriteMem = 1
DefFlipLed = 1

        *=$0500

        jsr init
        jmp start

.ifdef DefTestWriteMem
ptr2 = $32
.endif

CMD_EXECUTE = $80
CMD_READMEM = $1
CMD_WRITEMEM = $0

get_ts = $0700
get_byte = $0703
get_block = $0706
send_block = $070c
init = $070f

readmem:
        jsr send_block
        beq start       ; uncond

execute_cmd:
        jsr ts
        jmp (ptr)

        ; Init transfer routine
start:
.ifdef DefFlipLed
        jsr flipled
.endif
        jsr get_byte
.ifdef DefFlipLed
        jsr flipled
.endif
        bmi execute_cmd

readmem_cmd:
writemem_cmd:
        pha
        jsr ts
        jsr get_byte
        tay
        pla
        bne readmem     ; read memory, then execute that
.ifdef DefTestWriteMem
        lda #0
        sta ptr
        lda #3
        sta ptr+1
.endif
        jsr get_block
.ifdef DefTestWriteMem
        ldy #0
cmpnext lda (ptr),y
        cmp (ptr2),y
        bne error
        iny
        bne cmpnext
.endif
        beq start       ; uncond

.ifdef DefTestWriteMem
error:
        jsr flipled
        jsr delay1
        jsr flipled
        jsr delay1
        jmp error
.endif

ts:
        jsr get_ts
        stx ptr
        sty ptr+1
.ifdef DefTestWriteMem
        stx ptr2
        sty ptr2+1
.endif
        rts



.ifdef DefFlipLed
flipled:
        pha
        lda #8
        eor $1c00
        sta $1c00
        pla
        rts

delay1:
        pha
        txa
        pha
        tya
        pha

        ldx #0
        ldy #0

loop:   dey
        bne loop
        dex
        bne loop

        pla
        tay
        pla
        tax
        pla
        rts
.endif
